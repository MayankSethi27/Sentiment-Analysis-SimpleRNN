# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17mO3M0PP-mfB3YQyUIo-YzpEtzH4jHLv
"""

import streamlit as st
import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.sequence import pad_sequences
from keras.datasets import imdb
from tensorflow.keras import backend as K


K.clear_session()  # Reset name scopes and model states

# Load the pre-trained model from local path
model = load_model('SimpleRNN_IMDB_Model.h5')

# Load IMDb word index dictionary
word_index = imdb.get_word_index()

# Initial message confirming Streamlit is working
st.title("Streamlit is working!")
st.write("If you see this, the app loaded successfully.")

# Title and description for the sentiment classifier
st.title("üé¨ IMDB Movie Review Sentiment Classifier")
st.write("Enter a movie review and the model will predict if the sentiment is **Positive** or **Negative**.")

# Function to preprocess input text into padded sequences for the model
def preprocess_input(sentence, word_index, maxlen=500):
    if isinstance(sentence, str):
        sentence = [sentence]
    processed_sequences = []

    for sent in sentence:
        tokens = sent.lower().split()
        sequence = []
        for word in tokens:
            if word in word_index:
                sequence.append(word_index[word])
            else:
                sequence.append(2)  # 2 is <UNK> token
        processed_sequences.append(sequence)

    padded_seq = pad_sequences(processed_sequences, maxlen=maxlen, padding='post', truncating='post')
    return padded_seq

# Function to predict sentiment
def prediction(text):
    processed_text = preprocess_input(text, word_index)
    predict = model.predict(processed_text)[0][0]
    if predict > 0.5:
        return "üåü Positive"
    else:
        return "üòû Negative"

# Text area for user to enter review
user_input = st.text_area("üìù Enter your movie review here:", height=150)

# Button to trigger prediction
if st.button("Predict Sentiment"):
    if user_input.strip() == "":
        st.warning("Please enter a review to analyze.")
    else:
        result = prediction(user_input)
        st.success(f"**Prediction:** {result}")

